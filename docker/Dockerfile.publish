## GCC
FROM --platform=$TARGETPLATFORM gcc:9.2 as gcc
ARG TARGETPLATFORM
ARG BUILDPLATFORM
WORKDIR /gcc

# install app dependencies
COPY ["bin", "./"]

RUN apt-get update && apt-get install -y \
                   libcppunit-dev \
                   libjsoncpp-dev \
                   libv4l-dev \ 
                   libgstreamer1.0-dev \
                   libcurl4-nss-dev \
                   sqlite3 \
                   libsqlite3-dev
RUN mkdir -p build
RUN make

## backend
FROM --platform=$TARGETPLATFORM node:14-alpine as backend
ARG TARGETPLATFORM
ARG BUILDPLATFORM
WORKDIR /backend
RUN apk add --no-cache python2 make g++ sqlite 
# ENV PYTHONPATH /usr/lib/python3.7/site-packages
# backend
COPY ["backend/package.json", \
      "backend/package-lock.json", \
      "backend/ormconfig.js", \
      "backend/.eslintignore", \
      "backend/ormconfig.js", \
      "backend/node_sqlite3.node", \
      "backend/tsconfig.json", "./"]

COPY ["backend/src", "./src"]

RUN npm ci --only=production
RUN npm install sqlite3
RUN npm run build

## frontend
FROM --platform=$TARGETPLATFORM node:14-alpine as frontend
ARG TARGETPLATFORM
ARG BUILDPLATFORM
WORKDIR /frontend
RUN apk add --no-cache python2 make g++
# ENV PYTHONPATH /usr/lib/python3.7/site-packages

# install app dependencies
COPY [  "frontend/package.json", \
        "backend/package-lock.json", \
        "frontend/.env", \
        "frontend/.eslintignore", \
        "frontend/codegen.yml", \
        "frontend/tsconfig.json", "./"]

COPY ["frontend/src", "./src"]
COPY ["frontend/public", "./public"]

RUN npm install --legacy-peer-deps
RUN npm run build

FROM --platform=$TARGETPLATFORM sinamics/debian-uavcast-base:latest as main
ARG TARGETPLATFORM
ARG BUILDPLATFORM

LABEL maintainer="Bernt Christian Egeland / uavmatrix.com"

RUN echo "I am running on $BUILDPLATFORM, building for $TARGETPLATFORM"
WORKDIR /app/uavcast

ARG USERNAME=uavcast
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# Create the user
RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \
    #
    # [Optional] Add sudo support. Omit if you don't need to install software after connecting.
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME


COPY --from=gcc /gcc/build ./bin/build
COPY --from=frontend /frontend/build ./frontend/build

COPY --from=backend /backend/dist ./backend/dist
COPY --from=backend /backend/node_modules ./backend/node_modules
COPY --from=backend /backend/ormconfig.js ./backend
COPY --from=backend /backend/node_sqlite3.node ./backend

# systemctl3
COPY init/systemctl3.py /bin/systemctl
COPY init/systemctl3.py /bin/systemctl3.py
COPY init/journalctl3.py /bin/journalctl

## copy in files and folder
COPY ["bin/mavlink", "./bin/mavlink"]
COPY ["bin/python", "./bin/python"]
COPY ["bin/utils", "./bin/utils"]
COPY ["docker", "./docker"]

RUN chmod +x -R ./docker/bin \
                ./bin \
                /bin/systemctl \
                /bin/systemctl3.py \
                /bin/journalctl

RUN sudo touch /var/run/docker.sock
RUN sudo chmod 666 /var/run/docker.sock

# #changes the ownership of /var/run/docker.sock
RUN sudo chown uavcast:docker /var/run/docker.sock

#gives uavcast user permissions to access /var/run/docker.sock
RUN sudo usermod -a -G docker root

ENV NODE_ENV=production

RUN ["/app/uavcast/docker/bin/./prod-build.sh"]

ENTRYPOINT ["/app/uavcast/docker/bin/entrypoint.sh"]

CMD ["/bin/systemctl"]
# ENTRYPOINT ["tail", "-f", "/dev/null"]