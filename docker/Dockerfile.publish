###
#
#  !GCC
#
###
FROM --platform=$TARGETPLATFORM gcc:8.3 as gcc
ARG TARGETPLATFORM
ARG BUILDPLATFORM
WORKDIR /gcc

# install app dependencies
COPY ["bin", "./"]

RUN apt-get update && apt-get install -y \
      libcppunit-dev \
      libjsoncpp-dev \
      libv4l-dev \
      libgstreamer1.0-dev \
      libcurl4-nss-dev \
      sqlite3 \
      libsqlite3-dev
RUN mkdir -p build
RUN make clean && make

###
#
#  !Backend
#
###
FROM --platform=$TARGETPLATFORM node:14.4.0-buster-slim as backend
ARG TARGETPLATFORM
ARG BUILDPLATFORM
WORKDIR /backend

RUN apt-get update && apt-get install -y build-essential cmake python
RUN npm i typescript -g

COPY ["backend/package.json", \
      "backend/package-lock.json", \
      "backend/ormconfig.js", \
      "backend/.eslintignore", \
      "backend/ormconfig.js", \
      "backend/tsconfig.json", "./"]

COPY ["backend/src", "./src"]

RUN npm install
RUN npm run build

###
#
#  !Frontend
#
###
FROM --platform=$TARGETPLATFORM node:14.4.0-buster-slim as frontend
ARG TARGETPLATFORM
ARG BUILDPLATFORM
WORKDIR /frontend
RUN apt-get update && apt-get install -y build-essential cmake python

# install app dependencies
COPY [  "frontend/package.json", \
      "backend/package-lock.json", \
      "frontend/.eslintignore", \
      "frontend/codegen.yml", \
      "frontend/tsconfig.json", "./"]

COPY ["frontend/src", "./src"]
COPY ["frontend/public", "./public"]

RUN npm install
RUN npm run build


###
#
#  !final image creation
#
###
FROM --platform=$TARGETPLATFORM sinamics/uavcast-base:latest as main
ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG TARGETARCH

LABEL maintainer="Bernt Christian Egeland / uavmatrix.com"

RUN echo "I am running on $BUILDPLATFORM, building for $TARGETPLATFORM"
WORKDIR /app/uavcast

COPY --from=gcc /gcc/build ./bin/build
COPY --from=frontend /frontend/build ./frontend/build

COPY --from=backend /backend/dist ./backend/dist
COPY --from=backend /backend/node_modules ./backend/node_modules
COPY --from=backend /backend/ormconfig.js ./backend

RUN apt-get update && apt-get install -y \
      libcppunit-dev \
      libjsoncpp-dev \
      libcurl4-nss-dev \
      sqlite3 \
      libsqlite3-dev

#tools
RUN apt-get install -y net-tools \
      usbutils \
      less

# systemctl3
COPY init/systemctl3.py /bin/systemctl
COPY init/systemctl3.py /bin/systemctl3.py
COPY init/journalctl3.py /bin/journalctl

# Create mavlink directory
RUN mkdir -p /etc/mavlink-router

## copy in files and folder
COPY ["bin/mavlink/mavlink-routerd-${TARGETARCH}", "./bin/mavlink/mavlink-routerd"]
COPY ["etc/mavlink-router-example.conf", "/etc/mavlink-router/main.conf"]
COPY ["bin/python", "./bin/python"]
COPY ["etc", "./etc"]
COPY ["docker", "./docker"]

RUN chmod +x -R ./docker/bin \
      ./bin \
      /bin/systemctl \
      /bin/systemctl3.py \
      /bin/journalctl

RUN sudo touch /var/run/docker.sock
RUN sudo chmod 666 /var/run/docker.sock
# #changes the ownership of /var/run/docker.sock
RUN sudo chown uavcast:docker /var/run/docker.sock

# zerotier installation
RUN sudo curl -s https://install.zerotier.com/ | sudo bash

# Copy systemd files
COPY ["init/mavlink-router.service", \
      "init/uavcast-vpn.service", \
      "init/uavcast-web.service", \
      "init/uavcast.service", "/etc/systemd/system/"]
# "init/uavcast-camera.service", \

#gives uavcast user permissions to access /var/run/docker.sock
RUN sudo usermod -a -G docker root

# enable web interface and mavlink as default
RUN systemctl enable uavcast-web
RUN systemctl enable mavlink-router

# set container env production
ENV NODE_ENV=production

RUN ["docker/bin/./install-prod-addon.sh"]

ENTRYPOINT ["docker/bin/entrypoint.sh"]
CMD ["/bin/systemctl"]

